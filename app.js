// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();

// API URLs - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, —Ç–∞–∫ –∫–∞–∫ API –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–º –∂–µ –¥–æ–º–µ–Ω–µ
const API_BASE_URL = '/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
const map = L.map('map').setView([55.7558, 37.6173], 13);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è OpenStreetMap
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '¬© OpenStreetMap contributors'
}).addTo(map);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
navigator.geolocation.getCurrentPosition(
    (position) => {
        const { latitude, longitude } = position.coords;
        map.setView([latitude, longitude], 13);
    },
    (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
    }
);

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
const modal = document.getElementById('addPartyModal');
const addPartyBtn = document.getElementById('addPartyBtn');
const closeBtn = document.querySelector('.close');
const addPartyForm = document.getElementById('addPartyForm');

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
addPartyBtn.onclick = () => {
    modal.style.display = 'block';
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
closeBtn.onclick = () => {
    modal.style.display = 'none';
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = (event) => {
    if (event.target === modal) {
        modal.style.display = 'none';
    }
};

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—á–µ–∫
let parties = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –∏–∑ Telegram
async function loadParties() {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫
        const response = await fetch(`${API_BASE_URL}/get_parties`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: tg.initDataUnsafe.user.id
            })
        });
        
        if (response.ok) {
            parties = await response.json();
            displayParties();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫
function displayParties() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
    map.eachLayer((layer) => {
        if (layer instanceof L.Marker) {
            map.removeLayer(layer);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    parties.forEach(party => {
        if (!party.expired) {
            addMarkerToMap(party);
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç—É
function addMarkerToMap(party) {
    const marker = L.marker([party.latitude, party.longitude])
        .addTo(map)
        .bindPopup(`
            <div class="party-popup">
                <h3>${party.name}</h3>
                <p>${party.description}</p>
                <p>‚è∞ –î–æ: ${new Date(party.end_time).toLocaleString()}</p>
                <p>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${party.participants || 0}</p>
                ${party.is_private ? '<p>üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è</p>' : ''}
                <button onclick="joinParty(${party.id})" class="btn">üçª –ü–æ–π–¥—É!</button>
            </div>
        `);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
addPartyForm.onsubmit = async (e) => {
    e.preventDefault();

    const name = document.getElementById('partyName').value;
    const description = document.getElementById('partyDescription').value;
    const duration = parseInt(document.getElementById('partyDuration').value);
    const isPrivate = document.getElementById('isPrivate').checked;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
    const center = map.getCenter();
    
    const party = {
        name,
        description,
        latitude: center.lat,
        longitude: center.lng,
        duration,
        is_private: isPrivate,
        creator_id: tg.initDataUnsafe.user.id
    };

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
        const response = await fetch(`${API_BASE_URL}/create_party`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(party)
        });

        if (response.ok) {
            const newParty = await response.json();
            parties.push(newParty);
            addMarkerToMap(newParty);
            modal.style.display = 'none';
            addPartyForm.reset();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            tg.sendData(JSON.stringify({
                action: 'party_created',
                party_id: newParty.id
            }));
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏:', error);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ
async function joinParty(partyId) {
    try {
        const response = await fetch(`${API_BASE_URL}/join_party`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                party_id: partyId,
                user_id: tg.initDataUnsafe.user.id
            })
        });

        if (response.ok) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ
            const updatedParty = await response.json();
            const partyIndex = parties.findIndex(p => p.id === partyId);
            if (partyIndex !== -1) {
                parties[partyIndex] = updatedParty;
                displayParties();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadParties();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(loadParties, 30000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
tg.onEvent('message', (event) => {
    if (event.data) {
        try {
            const data = JSON.parse(event.data);
            if (data.action === 'update_parties') {
                parties = data.parties;
                displayParties();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
}); 